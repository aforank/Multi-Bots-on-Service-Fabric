[Serializable]
public class MasterRootDialog : IDialog<object>
{
    public Task StartAsync(IDialogContext context)
    {
        context.Wait(this.MessageReceivedAsync);
        return Task.CompletedTask;
    }

    public async Task MessageReceivedAsync(IDialogContext context, IAwaitable<IMessageActivity> result)
    {
        if (currentBotCtx == "Accounts")
        {
            await ForwardToChildBot("fabric:/OneBank.FabricApp/OneBank.AccountsBot", "api/messages", context.Activity);
        }
        else if (currentBotCtx == "Insurance")
        {
            await ForwardToChildBot("fabric:/OneBank.FabricApp/OneBank.InsuranceBot", "api/messages", context.Activity);
        }
        else
        {
            await context.PostAsync("Hello there! Welcome to OneBank.");
            await context.PostAsync("I am the Master bot");

            PromptDialog.Choice(context, ResumeAfterChoiceSelection, new List<string>() { "Account Management", "Buy Insurance" }, "What would you like to do today?");
        }                      
    }

    private async Task ResumeAfterChoiceSelection(IDialogContext context, IAwaitable<string> result)
    {
        var choice = await result;

        if (choice.Equals("Account Management", StringComparison.OrdinalIgnoreCase))
        {
            await ForwardToChildBot("fabric:/OneBank.FabricApp/OneBank.AccountsBot", "api/messages", context.Activity, headers);
        }
        else if (choice.Equals("Buy Insurance", StringComparison.OrdinalIgnoreCase))
        {
            await ForwardToChildBot("fabric:/OneBank.FabricApp/OneBank.InsuranceBot", "api/messages", context.Activity, headers);
        }
        else
        {
            context.Done(1);
        }
    }

    public async Task<HttpResponseMessage> ForwardToChildBot(string serviceName, string path, object model, IDictionary<string, string> headers = null)
    {
        var clientFactory = Conversation.Container.Resolve<IHttpCommunicationClientFactory>();
        var client = new ServicePartitionClient<HttpCommunicationClient>(clientFactory, new Uri(serviceName));

        HttpResponseMessage response = null;

        await client.InvokeWithRetry(async x =>
        {
            var targetRequest = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                Content = new StringContent(JsonConvert.SerializeObject(model), Encoding.UTF8, "application/json"),
                RequestUri = new Uri($"{x.HttpEndPoint}/{path}")
            };

            targetRequest.Headers.Add("X-My-Operation-Id", OperationContext.Get().OperationId);

            if (headers != null)
            {
                foreach (var key in headers.Keys)
                {
                    targetRequest.Headers.Add(key, headers[key]);
                }
            }

            response = await x.HttpClient.SendAsync(targetRequest);
        });

        string s = await response.Content.ReadAsStringAsync();
        return response;
    }
}